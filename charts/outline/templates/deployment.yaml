apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "outline.fullname" . }}
  labels:
    {{- include "outline.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "outline.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "outline.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "outline.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
        {{ if .Values.outline.certTrusts }}
        - name: {{ .Chart.Name }}-tls-ca-trust
          image: alpine:latest
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - /bin/sh
            - -ec
          args:
            - |
              cp /etc/ssl/certs/ca-certificates.crt /certs/trust/ca-certificates.crt && \
              {{- range $key, $value := .Values.outline.certTrusts }}
              cat /certs/untrusted/{{ $key }} | base64 -d >> /certs/trust/ca-certificates.crt && \
              {{- end }}
              echo "TLS CA trust updated"
          envFrom:
            - secretRef:
                name: {{ include "outline.fullname" . }}-trust
          resources:
            limits:
              memory: "256Mi"
              cpu: "500m"
          volumeMounts:
            - name: trust
              mountPath: /certs/trust
              readOnly: false
            - name: tls-certificate-authority
              mountPath: /certs/untrusted
        {{ end }}
        - name: {{ .Chart.Name }}-migration
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - "yarn"
          args:
            - 'db:migrate'
          envFrom:
            - secretRef:
                name: {{ include "outline.fullname" . }}-app-s3
            - secretRef:
                name: {{ include "outline.fullname" . }}-app-db
            - secretRef:
                name: {{ include "outline.fullname" . }}-app-redis
            - secretRef:
                name: {{ include "outline.fullname" . }}-app-mail
            - secretRef:
                name: {{ include "outline.fullname" . }}-app-authentication
            - secretRef:
                name: {{ include "outline.fullname" . }}-app-integration
            - secretRef:
                name: {{ include "outline.fullname" . }}-app-utils
            - configMapRef:
                name: {{ include "outline.fullname" . }}-app-config
          {{ if .Values.outline.certTrusts }}
          volumeMounts:
          - name: trust
            mountPath: /etc/ssl/certs
            readOnly: true
          {{ end }}
          resources:
            limits:
              memory: "256Mi"
              cpu: "500m"
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          envFrom:
            - secretRef:
                name: {{ include "outline.fullname" . }}-app-s3
            - secretRef:
                name: {{ include "outline.fullname" . }}-app-db
            - secretRef:
                name: {{ include "outline.fullname" . }}-app-redis
            - secretRef:
                name: {{ include "outline.fullname" . }}-app-mail
            - secretRef:
                name: {{ include "outline.fullname" . }}-app-authentication
            - secretRef:
                name: {{ include "outline.fullname" . }}-app-integration
            - secretRef:
                name: {{ include "outline.fullname" . }}-app-utils
            - configMapRef:
                name: {{ include "outline.fullname" . }}-app-config
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          {{ if .Values.outline.certTrusts }}
          volumeMounts:
          - name: trust
            mountPath: /etc/ssl/certs
            readOnly: true
          {{ end }}
          livenessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 30
            periodSeconds: 5
          readinessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 30
            periodSeconds: 5
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{ if .Values.outline.certTrusts }}
      volumes:
        - name: trust
          emptyDir: {}
        - name: tls-certificate-authority
          secret:
            secretName: {{ include "outline.fullname" . }}-trust
            optional: false
      {{ end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
